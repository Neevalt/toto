name: Trivy scan
description: |
  Scan repository and / or image to detect CVEs.
  Allows updating Github's security tab and send alert on slack channels.
inputs:
  CONTAINER_REGISTRY_USER:
    description: |
      Docker registry user.
      Required if using image scan.
    type: string
    required: false
  CONTAINER_REGISTRY_TOKEN:
    description: |
      Docker registry token.
      Required if using image scan.
    type: string
    required: false
  SLACK_APP_TOKEN:
    description: |
      Token used to send messages on slack.
      Required if 'channels' is set.
    type: string
    required: false
  ref:
    description: |
      Branch or tag the scan is associated to.
      Defaults to $GITHUB_REF, so is mandatory in cases where this value is not set.
    type: string
    required: false
    default: ${{ github.ref }}
  scan-type: 
    description: |
      Type of analysis: 'image' for docker images, 'fs' for files.
      Defaults to 'fs'.
    required: false
    type: choice
    options: 
      - fs
      - image
    default: fs
  scan-target:
    description: |
      Folder or docker image to scan.
      Defaults to respository folder.
    type: string
    required: false
    default: '.'
  slack-channels:
    description: Comma separated slack channels to notify scan results.
    type: string
    required: false

outputs:
  trivy-json:
    description: "JSON formatted scan result"
    value: ${{ steps.trivy-scan.outputs.TRIVY_TXT }}

runs:
  using: composite
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        if [[ '${{ inputs.ref }}' == '' ]]; then
          echo "::error::Input 'ref' was empty."
          exit 1
        fi

        if [[ '${{ inputs.scan-type }}' == 'image' && ( '${{ inputs.CONTAINER_REGISTRY_USER }}' == '' || '${{ inputs.CONTAINER_REGISTRY_TOKEN }}' == '' ) ]]; then
          echo "::error::Inputs 'CONTAINER_REGISTRY_USER' and 'CONTAINER_REGISTRY_TOKEN' are required if input 'scan-type' is set to 'image'."
          exit 1
        fi

        if [[ '${{ inputs.slack-channels }}' != '' && '${{ inputs.SLACK_APP_TOKEN }}' == '' ]]; then
          echo "::error::Input 'SLACK_APP_TOKEN' is mandatory if input 'slack-channels' is provided.'"
          exit 1
        fi

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref }}
    
    - name: Set ref
      id: set-ref-and-sha
      shell: bash
      run: |
        # Since input.ref can be a simple branch or tag name, use this command to get the full ref
        echo "ref=refs/$(git describe --all)" >> $GITHUB_OUTPUT
        echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

    - name: Login to Quay.io
      if: ${{ inputs.scan-type == 'image' }}
      uses: docker/login-action@v3
      with:
        registry: quay.io
        username: ${{ inputs.CONTAINER_REGISTRY_USER }}
        password: ${{ inputs.CONTAINER_REGISTRY_TOKEN }}

    - name: Pull docker image
      if: ${{ inputs.scan-type == 'image' }}
      shell: bash
      run: docker pull ${{ inputs.scan-target }}

    - name: Trivy scan
      id: trivy-scan
      shell: bash
      run: |
        # Enable aliases
        shopt -s expand_aliases
        alias trivy="docker run -v /var/run/docker.sock:/var/run/docker.sock -v $PWD:/results aquasec/trivy"

        # Scan
        trivy ${{ inputs.scan-type }} --exit-code 42 --scanners vuln --format json --output /results/trivy.json ${{ inputs.scan-target }} || output_code=$?

        # If scan failed for other reasons than finding vulnerabilities, stop
        if [[ $output_code != '' && $output_code != 42 ]]; then
          exit $output_code
        fi

        # If output code is 42, it means vulnerabilities have been found
        if [[ $output_code == 42 ]]; then
          trivy_text_template='{{- $critical := 0 }}{{- $high := 0 }}{{- $medium := 0 }}{{- $low := 0 }}{{- range . }}{{- range .Vulnerabilities }}{{- if  eq .Severity "CRITICAL" }}{{- $critical = add $critical 1 }}{{- end }}{{- if  eq .Severity "HIGH" }}{{- $high = add $high 1 }}{{- end }}{{- if  eq .Severity "MEDIUM" }}{{- $medium = add $medium 1 }}{{- end }}{{- if  eq .Severity "LOW" }}{{- $low = add $low 1 }}{{- end }}{{- end }}{{- end }}{{- if gt $critical 0 }}üî• Critical: \`{{ $critical }}\`{{- end }}{{- if gt $high 0 }} üî¥ High: \`{{ $high }}\`{{- end }}{{- if gt $medium 0 }} üü† Medium: \`{{ $medium }}\`{{- end }}{{- if gt $low 0 }} üü¢ Low: \`{{ $low }}\`{{- end }}'
          echo "TRIVY_MESSAGE=$(trivy convert --format template --template "$trivy_text_template" /results/trivy.json)" >> $GITHUB_OUTPUT

          trivy convert --format table --output /results/trivy.txt /results/trivy.json
          # echo "TRIVY_TXT=$(cat trivy.txt)" >> $GITHUB_OUTPUT
          echo "TRIVY_TXT=''"
        else
          echo "TRIVY_TXT=''"
        fi
        echo "je passe ici" >> $GITHUB_STEP_SUMMARY
    
    - name: Publish to Github summary
      if: ${{ hashFiles('trivy.txt') != '' }}
      shell: bash
      run: |
        {
          echo "### Security Output"
          echo "<details><summary>Click to expand</summary>"
          echo ""
          echo '```terraform'
          cat trivy.txt
          echo '```'
          echo "</details>"
        } >> $GITHUB_STEP_SUMMARY

    - name: Slack Notification
      if: ${{ inputs.slack-channels != '' && hashFiles('trivy.txt') != '' }}
      shell: bash
      run: |
        if [[ '${{ inputs.scan-type }}' == 'image' ]]; then
          emoji='üêã'
        else
          emoji='üìÇ'
        fi
        
        curl -F file=@trivy.txt \
             -F channels=${{ inputs.slack-channels }} \
             -F initial_comment="$emoji Trivy scan : \`${{ inputs.scan-type }}\` $emoji
        Found the following CVEs on repository \`${{ github.repository }}\` for ref \`${{ inputs.ref }}\`
        ${{ steps.trivy-scan.outputs.TRIVY_MESSAGE }}
        $tab_message" \
             -H 'Authorization: Bearer ${{ inputs.SLACK_APP_TOKEN }}' \
             https://slack.com/api/files.upload