on:
  workflow_dispatch:
    inputs:
      releases:
        description: Comma separated release branch names to scan. Defaults to last 3 releases if empty.
        required: false
      slack-channels:
        description: Comma separated slack channels to notify scan results.
        type: string
        required: false

jobs:
  setup:
    runs-on: ubuntu-22.04
    outputs:
      images-matrix: ${{ steps.images-matrix.outputs.result }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # with all branches

      - name: Output git branches
        id: output-branches
        shell: bash
        run: |
          if [[ '${{ inputs.releases }}' != '' ]]; then
            echo GIT_BRANCHES='${{ inputs.releases }}' >> $GITHUB_OUTPUT
          else
            echo GIT_BRANCHES=$(git branch --remotes --format '%(refname:lstrip=3),') >> $GITHUB_OUTPUT
          fi

      - name: Set branches
        uses: actions/github-script@v7
        id: set-branches
        with:
          script: |
            const gitBranches = '${{ steps.output-branches.outputs.GIT_BRANCHES }}'.split(',').map(branch => branch.trim());

            // Create a regex to get all release branches from current and last year
            const year = new Date().getFullYear();
            const releaseRegex = new RegExp(`(${year}|${year - 1})-Q(\\d)`);
            const allReleaseBranches = gitBranches.filter(ref => ref.match(releaseRegex));

            if (allReleaseBranches.length === 0) {
              throw new Error('No matching branch was found');
            }

            // Get the number of months a release represents
            function releaseToMonth(name) {
              const [year, quarter] = name.split('-');
              const yearNumber = Number(year);
              const quarterNumber = Number(quarter.at(1));
              return yearNumber * 12 + quarterNumber * 3;
            }

            // Get last 3 releases
            const sortedReleases = allReleaseBranches.sort((r1, r2) => releaseToMonth(r2) - releaseToMonth(r1));
            const last3Releases = sortedReleases.slice(0, 3);

            return {
              branches: [...last3Releases],
            };

      - name: Set images matrix
        id: images-matrix
        uses: actions/github-script@v7
        with:
          script: |
            const releases = ${{ steps.set-branches.outputs.result }}.branches;

            const results = releases.map(branch => ({
                branch,
                image: `quay.io/evooq/benzene-branch:B-${branch}`,
            }));

            return {
              result: [...results, { branch: 'master', image: 'quay.io/evooq/benzene:dev' }],
            };

  scans:
    needs: setup
    runs-on: ubuntu-22.04
    strategy:
      max-parallel: 1 # to ensure job execution order
      matrix:  ${{ fromJSON(needs.setup.outputs.images-matrix) }}
    steps:
      - name: Run libraries scan
        uses: evooq/security-scanning@v1
        with:
          ref: ${{ matrix.result.branch }}
          scan-type: fs
          slack-channels: ${{ inputs.slack-channels }}
          CONTAINER_REGISTRY_USER: ${{ secrets.CONTAINER_REGISTRY_USER }}
          CONTAINER_REGISTRY_TOKEN: ${{ secrets.CONTAINER_REGISTRY_TOKEN }}
          SLACK_APP_TOKEN: ${{ secrets.SLACK_APP_TOKEN }}

      - name: Run image scan
        uses: evooq/security-scanning@v1
        with:
          scan-type: image
          scan-target: ${{ matrix.result.image }}
          slack-channels: ${{ inputs.slack-channels }}
          CONTAINER_REGISTRY_USER: ${{ secrets.CONTAINER_REGISTRY_USER }}
          CONTAINER_REGISTRY_TOKEN: ${{ secrets.CONTAINER_REGISTRY_TOKEN }}
          SLACK_APP_TOKEN: ${{ secrets.SLACK_APP_TOKEN }}
